// buildscript for testing against local version
// of s3-plugin. See project root README for using s3-plugin
// in your projects.
buildscript {
    repositories {
        maven { url uri('../build/repo') }
        jcenter()
    }
    dependencies {
        classpath group: 'com.github.mgk.gradle',
                  name: 's3',
                  version: file("../build/VERSION").text
    }
}

apply plugin: 'groovy'
apply plugin: 'com.github.mgk.gradle.s3'

import com.github.mgk.gradle.*

s3 {
  bucket = "${System.env.BUCKET}"
  // role = "arn:aws:iam::000000000000:role/system/my-role"
  // profile = 'travis-s3-plugin'
}

def root = System.env.TRAVIS == 'true' ?
    "${System.env.TRAVIS_BRANCH}/${System.env.TRAVIS_BUILD_NUMBER}" :
    "${new Date().toInstant()}"

// upload a new file
task uploadNew(type: S3Upload) {
    def f = new File("${buildDir}/hello.txt")
    doFirst {
        f.parentFile.mkdirs()
        f.text = 'hello'
    }
    file = f
    key = "${root}/hello.txt"
}

// attempt to upload a file that already exists on
// S3 without overwrite -> no action is taken
task uploadExisting(type: S3Upload, dependsOn: uploadNew) {
    file = new File("${buildDir}/hello.txt")
    key = "${root}/hello.txt"
}

// overwrite existing S3 object
task uploadExistingWithOverwrite(type: S3Upload, dependsOn: uploadExisting) {
    file = new File("${buildDir}/hello.txt")
    key = "${root}/hello.txt"
    overwrite = true
}

def testFiles = ['a/b1', 'a/b2', 'a/b/c1', 'a/b/c2']

task createTestFiles {
    doLast {
        File dir = file("${buildDir}/tree")
        testFiles.each { name ->
            def f = file("${buildDir}/tree/${name}")
            f.parentFile.mkdirs()
            f.text = name
        }
    }
}

task uploadTestFiles(dependsOn: createTestFiles) {
    doLast {
        def dir = file("${buildDir}/tree")
        fileTree(dir: dir).each { f ->
            def path = dir.toPath().relativize(f.toPath())
            def t = task "upload-${path}"(type: S3Upload) {
                file = f
                key = "${root}/tree/${path}"
            }
            t.execute()
        }
    }
}

task downloadRecursive(type: S3Download, dependsOn: uploadTestFiles) {
    keyPrefix = "${root}/tree"
    destDir = "${buildDir}/download-tree"
}

task checkDownloadRecursive(type: Exec, dependsOn: downloadRecursive) {
    workingDir buildDir
    commandLine 'diff', '-q', '-r', 'tree', "download-tree/${root}/tree"
}

check.dependsOn(
    uploadExistingWithOverwrite,
    checkDownloadRecursive,
)

// To prune or re-root a downloaded tree removing the keyPrefix
// use a Gradle Copy task. This can be used to mostly mimic the AWS CLI:
//
//   aws s3 cp --recursive <bucket-path> <local-path>
//
task copyDownload(type: Copy, dependsOn: downloadRecursive) {
    from "${buildDir}/download-tree/${root}/tree"
    into "${buildDir}/pruned-copy"
}
